{"version":3,"sources":["InfoBox.js","Table.js","util.js","Map.js","App.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","center","casesType","zoom","useState","MapContainer","TileLayer","url","attribution","data","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","mapZoom","setMapZoom","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","useEffect","a","fetch","response","json","getCountriesData","then","name","value","iso2","sortedData","sort","b","sortData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","onClick","e","isRed","active","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ef6ddf6.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction InfoBox({title,cases,total}) {\r\n    return (\r\n        <div>\r\n            <Card className=\"infoBox\">\r\n                <CardContent>\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                    <h2 className=\"infoBox__cases\">{cases}</h2>\r\n                    <Typography className=\"infoBox__total\" >{total}Total</Typography>\r\n                    \r\n                </CardContent>\r\n            </Card>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        {countries.map(({country,cases}) =>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td>\r\n                    <strong>{cases}</strong>\r\n                </td>\r\n            </tr>\r\n        ))}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n  \r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    \r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React,{useState} from 'react'\r\nimport {MapContainer,TileLayer,Marker,Popup} from \"react-leaflet\"\r\nimport { showDataOnMap } from \"./util\";\r\n\r\n\r\nfunction Map({center,casesType,zoom,countries}) {\r\n    const [lat,setLat] = useState(0);\r\n    const[lng,setLng] = useState(0);\r\n    return (\r\n        <div>\r\n            <MapContainer className=\"map\" center={center} zoom={zoom}>\r\n            <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        \r\n        {showDataOnMap(countries, casesType)}\r\n                \r\n\r\n            </MapContainer>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React,{useState,useEffect} from 'react';\n\nimport './App.css';\nimport {FormControl,Select} from \"@material-ui/core\"\nimport  { MenuItem } from '@material-ui/core'; \nimport InfoBox from \"./InfoBox\"\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from \"./Table\"\n\nimport \"leaflet/dist/leaflet.css\";\nimport Map from \"./Map\"\n\nimport numeral from \"numeral\"\n\nimport { sortData, prettyPrintStat } from \"./util\";\n\n\n\nfunction App() {\n  const [mapZoom, setMapZoom] = useState(3);\n  const[countries,setCountries] = useState([])\n  const [country,setCountry] = useState(\"worldwide\");\n  const[countryInfo,setCountryInfo] = useState({})\n  const[tableData,setTableData] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries,setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  \n  useEffect(() =>{\n    const getCountriesData = async ()=>{\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      const data = await response.json();\n      return data;\n    };\n      getCountriesData().then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name:country.country,\n            value:country.countryInfo.iso2\n          }\n        ))\n        const sortedData = sortData(data);\n      setTableData(sortedData);\n        setCountries(countries);\n        setMapCountries(data);\n      })\n    \n\n    \n    \n    });\n    const onCountryChange = async(event) =>{\n      const countryCode = event.target.value;\n      setCountry(countryCode)\n      const url = countryCode ==='worldwide'?'https://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`\n      await fetch(url)\n      .then(response =>response.json())\n      .then(data=>{\n        setCountry(countryCode)\n        setCountryInfo(data)\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n        setMapZoom(4);\n      })\n\n    }\n  return (\n    \n      \n      <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1>COVID-19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant=\"outlined\"\n           onChange={onCountryChange}\n            value={country} >\n            \n            <MenuItem value=\"worldwide\">worldwide</MenuItem>\n            {countries.map((country)=>(\n             <MenuItem value={country.value}>{country.name}</MenuItem> \n            ))}\n          </Select>\n        </FormControl>\n      </div>\n      <div className=\"app__stats\">\n      <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n        <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n      </div>\n      <Map\n       countries={mapCountries}\n       casesType={casesType}\n       center={mapCenter}\n       zoom={mapZoom}\n      />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <Table countries={tableData} />\n          \n        </CardContent>\n      \n      </Card>\n     \n        \n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\"\nimport \"./index.css\";\nReactDOM.render(\n    \n      <App />,\n  document.getElementById(\"root\")\n  ); \n"],"sourceRoot":""}